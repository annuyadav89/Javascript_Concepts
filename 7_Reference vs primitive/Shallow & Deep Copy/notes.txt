  Shallow Copying:
     //  Shallow copying refers to creating a new object or array with the same values as the original, 
     //  but the new object or array only holds references to the original object's or array's values.
     //  This means that any changes made to the original object or array will also be reflected in the copied object or array.

     //  example
       const originalArray = [1, 2, 3, 4];
       const newArray = originalArray;

     // In this case, newArray is a shallow copy of originalArray.
     // Any changes made to the originalArray will also be reflected in newArray. 

 ==============================================================================================================================

  Why use Shallow Copying?
     // Shallow copying can be useful in situations where you need to create a new object or array quickly and efficiently.
     // Since a shallow copy only holds references to the original object's or array's values, it requires less memory than a deep copy.
     // Shallow copying is also useful when working with large objects or arrays, as creating a deep copy of a large object or array can be a time-consuming process.

===============================================================================================================================

  How to Implement Shallow Copying in JavaScript?
      1. Spread operator:
          // The spread operator is a popular method for creating shallow copies of objects and arrays. 

 Example:
   const originalObject = {a: 1, b: 2, c: 3};
   const newObject = {...originalObject};

   const originalArray = [1, 2, 3, 4]; 
   const newArray = [...originalArray];

     2. Object.assign():
          // Another method for creating shallow copies of objects is to use the Object.assign() method.  

  Example:
     const originalObject = {a: 1, b: 2, c: 3};
     const newObject = Object.assign({}, originalObject);

================================================================================================================================
================================================================================================================================

  Deep Copying:
     // Deep copying, on the other hand, refers to creating a new object or array with the same values as the original,
     // but the new object or array holds new copies of the original object's or array's values. 
     // This means that any changes made to the original object or array will not be reflected in the copied object or array.

     Example:
        const originalArray = [1, 2, 3, 4];
        const newArray = JSON.parse(JSON.stringify(originalArray));

   Why use Deep Copying?
     // Deep copying is useful in situations where you need to create a new object or array with independent values from the original object.